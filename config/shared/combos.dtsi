/*                                      42 KEY MATRIX / LAYOUT MAPPING

  ╭────────────────────────┬────────────────────────╮ ╭─────────────────────────┬─────────────────────────╮
  │  0   1   2   3   4   5 │  6   7   8   9  10  11 │ │ LT5 LT4 LT3 LT2 LT1 LT0 │ RT0 RT1 RT2 RT3 RT4 RT5 │
  │ 12  13  14  15  16  17 │ 18  19  20  21  22  23 │ │ LM5 LM4 LM3 LM2 LM1 LM0 │ RM0 RM1 RM2 RM3 RM4 RM5 │
  │ 24  25  26  27  28  29 │ 30  31  32  33  34  35 │ │ LB5 LB4 LB3 LB2 LB1 LB0 │ RB0 RB1 RB2 RB3 RB4 RB5 │
  ╰───────────╮ 36  37  38 │ 39  40  41 ╭───────────╯ ╰───────────╮ LH2 LH1 LH0 │ RH0 RH1 RH2 ╭───────────╯
              ╰────────────┴────────────╯                         ╰─────────────┴─────────────╯             */

/*
 * maps to `timeout-ms`
 * Keys must be both pressed within this time
 *
 * if too slow = false positives in rolls
 * if too fast = types out both letters instead
 */
#define COMBO_TERM_FAST 25
#define COMBO_TERM_SLOW 50

/**
 * maps to `require-prior-idle-ms`
 * Must have no keys outside the combo pressed in this time before it
 *
 * if too slow = combo doesn't trigger when needed
 * if too fast = combo will trigger in normal typing
 */
#define COMBO_IDLE_FAST 170
#define COMBO_IDLE_SLOW 80

//  name,  combo_bindings,  keypos,  combo_layers,  timeout-ms,  require-prior-idle-ms

/* Left side */

// top row esc/tab
ZMK_COMBO(esc,        &esc,           LT3 LT2,  BASE NAV NUM, COMBO_TERM_FAST, COMBO_IDLE_FAST)
ZMK_COMBO(tab,        &tab,           LT2 LT1,  BASE NAV NUM, COMBO_TERM_FAST, COMBO_IDLE_FAST)
ZMK_COMBO(open_term,  &kp LC(GRAVE),  LT3 LT1,  BASE NAV NUM, COMBO_TERM_FAST, COMBO_IDLE_FAST)

// home row () -> <>
ZMK_COMBO(lpar,  &lpar_lt,      LM2 LM3,        BASE NAV NUM, COMBO_TERM_FAST, COMBO_IDLE_FAST, LS(LALT),     KEYS_R)
ZMK_COMBO(rpar,  &rpar_gt,      LM1 LM2,        BASE NAV NUM, COMBO_TERM_FAST, COMBO_IDLE_FAST, LS(LCTRL),    KEYS_R)

// bottom row copy/paste/cut; holdable RETURN
ZMK_COMBO(copy,  &kp LC(C),     LB3 LB2,      BASE NAV NUM, COMBO_TERM_FAST, COMBO_IDLE_FAST)
ZMK_COMBO(paste, &kp LC(V),     LB2 LB1,      BASE NAV NUM, COMBO_TERM_FAST, COMBO_IDLE_FAST)
ZMK_COMBO(cut,   &kp LC(X),     LB3 LB1,      BASE NAV NUM, COMBO_TERM_FAST, COMBO_IDLE_FAST)
ZMK_COMBO(return, &kp RET,      LB1 LB0,      BASE NAV NUM, COMBO_TERM_FAST, COMBO_IDLE_FAST)

/* Right side */

// top row (), vscode open terminal
ZMK_COMBO(backspace,       &kp BSPC,           RT1 RT2,      BASE NAV NUM, COMBO_TERM_FAST, COMBO_IDLE_FAST)
ZMK_COMBO(delete,          &kp DEL,            RT2 RT3,      BASE NAV NUM, COMBO_TERM_FAST, COMBO_IDLE_FAST)
ZMK_COMBO(ctrl_fslash,     &kp LC(FSLH),       RT1 RT3,      BASE NAV NUM, COMBO_TERM_FAST, COMBO_IDLE_FAST)

// home row [] -> {}
ZMK_COMBO(lbkt,  &l_bracket,      RM1 RM2,      BASE NAV NUM, COMBO_TERM_FAST, COMBO_IDLE_FAST, RS(RCTRL), KEYS_L)
ZMK_COMBO(rbkt,  &r_bracket,      RM2 RM3,      BASE NAV NUM, COMBO_TERM_FAST, COMBO_IDLE_FAST, RS(RALT),  KEYS_L)

// bottom row holdable SPACE BACKSPACE DEL; word backspace
ZMK_COMBO(space,      &kp SPACE,     RB0 RB1,       BASE NAV NUM, COMBO_TERM_FAST, COMBO_IDLE_FAST)
ZMK_COMBO(go_back,    &kp LA(LEFT),  RB1 RB2,       BASE NAV NUM, COMBO_TERM_FAST, COMBO_IDLE_FAST)
ZMK_COMBO(go_fwd,     &kp LA(RIGHT), RB2 RB3,       BASE NAV NUM, COMBO_TERM_FAST, COMBO_IDLE_FAST)


/* Vertical combos - left hand */

// middle-top ! @ # $ %
ZMK_COMBO(ctrl_b,  &kp LC(B),     LM5 LT5,      BASE NAV NUM, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
ZMK_COMBO(excl,    &kp EXCL,      LM4 LT4,      BASE NAV NUM, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
ZMK_COMBO(at,      &kp AT,        LM3 LT3,      BASE NAV NUM, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
ZMK_COMBO(hash,    &kp HASH,      LM2 LT2,      BASE NAV NUM, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
ZMK_COMBO(dllr,    &kp DLLR,      LM1 LT1,      BASE NAV NUM, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
ZMK_COMBO(prcnt,   &kp PRCNT,     LM0 LT0,      BASE NAV NUM, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)

// middle-bottom ~ ` ; = -
ZMK_COMBO(ctrl_g, &kp LC(G),      LB5 LM5,      BASE NAV NUM, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
ZMK_COMBO(tilde, &kp TILDE,       LB4 LM4,      BASE NAV NUM, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
ZMK_COMBO(grave, &kp GRAVE,       LB3 LM3,      BASE NAV NUM, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
ZMK_COMBO(semi, &kp SEMI,         LB2 LM2,      BASE NAV NUM, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
ZMK_COMBO(minus_dupe, &kp MINUS,  LB1 LM1,      BASE NAV NUM, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
ZMK_COMBO(equal_dupe, &kp EQUAL,  LB0 LM0,      BASE NAV NUM, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)

/* Vertical combos - right hand */

// middle-top ^ & * - =
ZMK_COMBO(caret, &kp CARET,        RM0 RT0,      BASE NAV NUM, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
ZMK_COMBO(amps,  &kp AMPS,         RM1 RT1,      BASE NAV NUM, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
ZMK_COMBO(star,  &kp STAR,         RM2 RT2,      BASE NAV NUM, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
ZMK_COMBO(minus, &kp MINUS,        RM3 RT3,      BASE NAV NUM, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
ZMK_COMBO(equal, &kp EQUAL,        RM4 RT4,      BASE NAV NUM, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
ZMK_COMBO(ctrl_grv, &kp LC(GRAVE), RM5 RT5,      BASE NAV NUM, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)

// middle-bottom _ / : \ |
ZMK_COMBO(fslh,   &kp FSLH,          RB0 RM0,      BASE NAV NUM, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
ZMK_COMBO(under,  &kp UNDER,         RB1 RM1,      BASE NAV NUM, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
ZMK_COMBO(colon,  &kp COLON,         RB2 RM2,      BASE NAV NUM, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
ZMK_COMBO(bslsh,  &kp BSLH,          RB3 RM3,      BASE NAV NUM, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
ZMK_COMBO(pipe,   &kp PIPE,          RB4 RM4,      BASE NAV NUM, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
ZMK_COMBO(ctrl_alt_i, &kp LC(LA(I)), RB5 RM5,      BASE NAV NUM, COMBO_TERM_SLOW, COMBO_IDLE_SLOW)
